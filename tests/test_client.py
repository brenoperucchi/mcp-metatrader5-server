#!/usr/bin/env python3
"""
Cliente de teste direto - Testa as funcionalidades MCP localmente
"""

import sys
import json
from pathlib import Path

# Adicionar src ao path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

def test_direct():
    """Teste direto das funcionalidades sem MCP protocol"""
    
    print("üß™ TESTE DIRETO DAS FUNCIONALIDADES MT5")
    print("=" * 50)
    
    try:
        # Importar m√≥dulos diretamente
        from mcp_metatrader5_server.server import config_manager
        
        print("‚úÖ M√≥dulos carregados com sucesso")
        print()
        
        # 1. Configura√ß√£o atual
        print("1. üéØ CONFIGURA√á√ÉO ATUAL:")
        try:
            # Usar o config_manager diretamente
            current = config_manager.get_current_config_info()
            print(f"   üìä Nome: {current.get('name', 'N/A')}")
            print(f"   üåç Mercado: {current.get('market_type', 'N/A')}")
            print(f"   üè¶ Conta: {current.get('account', 'N/A')}")
            print(f"   üñ•Ô∏è Servidor: {current.get('server', 'N/A')}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        print()
        
        # 2. Configura√ß√µes dispon√≠veis
        print("2. ‚öôÔ∏è CONFIGURA√á√ïES DISPON√çVEIS:")
        try:
            from mcp_metatrader5_server.mt5_configs import MT5_CONFIGS
            for key, config in MT5_CONFIGS.items():
                is_current = config_manager.current_config and config.name == config_manager.current_config.name
                status = "‚úÖ ATIVA" if is_current else "‚ö™"
                print(f"   {status} {key}: {config.name} ({config.market_type})")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        print()
        
        # 3. Valida√ß√£o demo
        print("3. üîí VALIDA√á√ÉO DE CONTA DEMO:")
        try:
            # Usar o mock diretamente
            from mcp_metatrader5_server.mt5_mock import mt5_mock
            account = mt5_mock.account_info()
            is_demo = account.trade_mode == 0  # Demo mode
            status = "‚úÖ PERMITIDO" if is_demo else "üö® BLOQUEADO"
            print(f"   Status: {status}")
            print(f"   Tipo: {'DEMO' if is_demo else 'REAL'}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        print()
        
        # 4. Informa√ß√µes da conta
        print("4. üíº INFORMA√á√ïES DA CONTA:")
        try:
            from mcp_metatrader5_server.mt5_mock import mt5_mock
            account = mt5_mock.account_info()
            print(f"   üè¶ Conta: {account.login}")
            print(f"   üí∞ Saldo: ${account.balance:.2f}")
            print(f"   üìà Equity: ${account.equity:.2f}")
            print(f"   üíµ Moeda: {account.currency}")
            print(f"   üè¢ Corretora: {account.company}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        print()
        
        # 5. S√≠mbolos dispon√≠veis
        print("5. üìä S√çMBOLOS (Primeiros 5):")
        try:
            from mcp_metatrader5_server.mt5_mock import mt5_mock
            symbols = mt5_mock.symbols_get()
            symbols_list = [s.name for s in symbols[:5]]
            print(f"   {symbols_list}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        print()
        
        # 6. Teste de troca de configura√ß√£o
        print("6. üîÑ TESTE DE TROCA DE CONFIGURA√á√ÉO:")
        try:
            # B3 -> Forex
            result = config_manager.switch_config("forex")
            if result['success']:
                print(f"   ‚úÖ Trocado para: {result['current_config']['name']}")
            
            # Forex -> B3  
            result = config_manager.switch_config("b3")
            if result['success']:
                print(f"   ‚úÖ Voltou para: {result['current_config']['name']}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        print()
        
        # 7. Informa√ß√µes do terminal
        print("7. üñ•Ô∏è INFORMA√á√ïES DO TERMINAL:")
        try:
            from mcp_metatrader5_server.mt5_mock import mt5_mock
            terminal = mt5_mock.terminal_info()
            print(f"   Nome: {terminal.name}")
            print(f"   Empresa: {terminal.company}")
            print(f"   Build: {terminal.build}")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        print()
        
        print("=" * 50)
        print("‚úÖ TESTE DIRETO CONCLU√çDO COM SUCESSO!")
        print("=" * 50)
        print("üéØ Todas as funcionalidades est√£o operacionais")
        print("üîß Use essas mesmas fun√ß√µes no seu c√≥digo")
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        import traceback
        traceback.print_exc()

def show_available_functions():
    """Mostra todas as fun√ß√µes dispon√≠veis para uso direto"""
    
    print("\nüìö FUN√á√ïES DISPON√çVEIS PARA USO DIRETO:")
    print("-" * 45)
    
    functions = [
        ("config_manager.get_current_config_info()", "Obter configura√ß√£o atual"),
        ("config_manager.switch_config('forex')", "Trocar para Forex"),
        ("config_manager.switch_config('b3')", "Trocar para B3"),
        ("mt5_mock.account_info()", "Informa√ß√µes da conta"),
        ("mt5_mock.symbols_get()", "Lista de s√≠mbolos"),
        ("mt5_mock.symbol_info('ITSA4')", "Info de um s√≠mbolo"),
        ("mt5_mock.symbol_info_tick('ITSA4')", "√öltimo tick"),
        ("mt5_mock.copy_rates_from_pos(...)", "Dados hist√≥ricos"),
        ("mt5_mock.order_send(...)", "Enviar ordem"),
        ("mt5_mock.positions_get()", "Posi√ß√µes abertas"),
    ]
    
    for i, (func, desc) in enumerate(functions, 1):
        print(f"{i:2d}. {func}")
        print(f"    üìù {desc}")
        print()

if __name__ == "__main__":
    test_direct()
    show_available_functions()
    
    print("\nüöÄ EXEMPLO DE USO PR√ÅTICO:")
    print("-" * 25)
    print("""
from mcp_metatrader5_server.server import config_manager
from mcp_metatrader5_server.mt5_mock import mt5_mock

# Trocar para Forex
result = config_manager.switch_config('forex')
print(f"Configura√ß√£o: {result['current_config']['name']}")

# Obter cota√ß√£o
tick = mt5_mock.symbol_info_tick('EURUSD') 
print(f"EURUSD: Bid={tick.bid}, Ask={tick.ask}")

# Informa√ß√µes da conta
account = mt5_mock.account_info()
print(f"Saldo: ${account.balance:.2f}")
    """)